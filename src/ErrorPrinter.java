import java.io.IOException;
import java.util.*;

public abstract class ErrorPrinter {
    private static final ErrorDB DB = new ErrorDB();
    private static String additionalDetails;

    public static Exception errorHandler(ERROR_CODE code){
        final StringBuilder builder = new StringBuilder();

        builder.append("\n------------------------------------------------------------------------------------------------");
        Error error = DB.get(code);
        if(error==null){
            error = DB.get(ERROR_CODE.ABSTRUSE);
            error.details = "[ATTEMPTED-CALL]: "+code+"\n"+additionalDetails;
        }

        //first portion of error printing system: prints out details of what happened
        //ERROR is for actual game-impeding issues; ABNORMALITY is for unintended things of lower destructiveness/priority. (honestly most of these are fringe cases that never happen ever but its good to have a handler)
        headerBuilder(error.isError, true,"");

        System.out.println(error.cause); //explains what happened and a likely explanation for why
        builder.append("\n[ERROR-CODE]: ").append(error.code);

        //second part: prints out relevant variable values, usually for my own debugging use
        if(error.details!=null) {
            headerBuilder(error.isError, false, "DETAILS");
            System.out.println(error.details);
        }

        //additional details, usually aimed at end-users
        if(error.additional!=null){
            headerBuilder(error.isError, false,"ADDITIONAL-DETAILS");
            System.out.println(error.additional);
        }

        builder.append("\n------------------------------------------------------------------------------------------------");

        if(error.isError){
            if(!code.equals(ERROR_CODE.DEBUG)){
                GameManager.emergencyShutdown();
                builder.append("\n\n[a message from alex regarding errors]\n-this is automatically appended to all errors-\nso there's actually two types of issues in the error handler i wrote: abnormalities and errors\nabnormaities are just unintended issues i should probably fix\nand errors are active issues that impede the functioning of the game\nso while its important that you report any kind of weird stuff happening it's especially important you report errors to me\nthanks bro\n-alexander");

            }else{
                builder.append("\n[THIS ERROR WAS GENERATED BY USE OF A DEBUG FUNCTION. THERE IS NO PROBLEM.]");
            }
       }

       /*boolean stackYN = getYN("Would you like to print a stack-trace? (if you dont know what this is just say yes");
       if(stackYN){System.out.println(e.getMessage()); e.printStackTrace();}*/

       return new Exception(builder.toString());
    }


    private static void headerBuilder(boolean isError, boolean isMainHeader, String message){
        String display = "[[--%s--]]";
        if(isMainHeader){
            if(isError){display = "[[[[----ERROR!----]]]]";
            }else{display = "[[[---ABNORMALITY---]]]";}
        }else if(isError){display="\n[[[---%s---]]]";}

        System.out.printf(display+"\n",message);
    }

    /* ERR: error - fatal enough that the game cannot continue functioning and should be resolved immediately
     * ABN: abnormality - game might behave unexpectedly, but can still function. fix whenever possible */
    //most of these are hypotheticals just in case and i cannot imagine they could ever happen in a real game
    public enum ERROR_CODE{
        //GM: game-manager-related
        ERR_GM_EXECUTOR_SERVICE_FAULT, //
        ABN_GM_DEBUG_GENERIC_EXCEPTION,

        //BR: board/cell-related
        ERR_BR_CELL_OOB, //cell does not exist, pointer is probably OOB
        ABN_BR_CELL_UNDER_CONSTRUXION, //error during cell construction process
        ERR_BR_GENERIC, //generic catch-all error

        //SK: snake-related
        ABN_SK_IRREGULAR_MOVEMENT, //snake somehow moved twice in a row or both row/col vals at once
        ERR_SK_OUROBOROS, //snake somehow managed to turn in on itself

        //HS: (high)-score-related
        ABN_HS_INSUBSTANTIAL,
        ABN_HS_MALFORMED,

        //unique
        ABSTRUSE, //fallback
        DEBUG //youll never guess what THIS is!!

    }

    public static void setDetails(String errorDetails, boolean append){
        if(append){additionalDetails += errorDetails;
        }else{additionalDetails=errorDetails;}
    }

    //some of these errors have values that need updates so they are initialized in the updateValues method instead which is why some have placeholder details
    //todo: make these err codes enums instead
    public static void initialize() throws IOException {

        DB.putAllErrs(new Error[]{
            //game-management related
            new Error(ERROR_CODE.ERR_GM_EXECUTOR_SERVICE_FAULT, true, "The frame-advancement protocol threw an exception!", null, "Unfortunately, this is a very generic error which can be applied to just about anything and if the stacktrace isn't useful there's just about nothing I can actually do about it :/"),
            new Error(ERROR_CODE.ABN_GM_DEBUG_GENERIC_EXCEPTION, false, "error debug method", null, null),

            //board-related
            new Error(ERROR_CODE.ERR_BR_CELL_OOB, true, "The specified cell does not exist!", "!!PLACEHOLDER!! this should be overwritten in errorprinter class", null),
            new Error(ERROR_CODE.ABN_BR_CELL_UNDER_CONSTRUXION, false, "Abnormality during the cell construction process!", "!!PLACEHOLDER!! this should be overwritten in errorprinter class", null), //the name is a camellia ref LOL@!
            new Error(ERROR_CODE.ERR_BR_GENERIC, true, "An error occurred regarding the cells!", "!!PLACEHOLDER!! this should be overwritten in errorprinter class", "This is a super generic error I made in the off-chance an error happens with the board that isn't accounted for by other errors and is as a result very vague and it would be incredibly hard to get specific details on"),

            //snake-related
            new Error(ERROR_CODE.ABN_SK_IRREGULAR_MOVEMENT, false, "Snake movement is dysfunctional!\nYou likely somehow managed to both row/col values at once, or somehow moved twice in one frame advancement.",null, null),
            new Error(ERROR_CODE.ERR_SK_OUROBOROS, true, "Snake turned around in on itself!\nWhile there are checks in place to prevent the snake from going right when it's already going left, this was (somehow) not applied.", null, "\n[TEMP]\nthe snake moves every 75 milliseconds, but inputs are constantly being read from the ActionListener.\nits possible to make 2 inputs in-between each frame and bypass the protections against ouroboros-ing yourself"),

            //errors for high-score reading
            new Error(ERROR_CODE.ABN_HS_INSUBSTANTIAL, false, "Length high-score not found or invalid!", "\n[VALUE]: " + DataReadingInterface.errorOutput(), "The program has already created a new file and added a default value of 0, so the issue's resolved itself.\nIf this is your first time running the program, you can probably ignore this."),
            new Error(ERROR_CODE.ABN_HS_MALFORMED, false, "Your high-score is malformed!\nIt's either larger than the amount of cells in the board, or is negative.", "[CELL COUNT]: " + GameUI.cellCount + "\n[HIGH-SCORE]: " + DataReadingInterface.errorOutput(), "HIGH-SCORE DATA HAS BEEN ERASED."),

            //unique
            new Error(ERROR_CODE.ABSTRUSE, true, "This is a fallback error: Something called the ErrorPrinter class, but the error-code specified is malformed or does not exist.", null, "It's very likely I just made a typo somewhere."),

        });

        updateValues();

    }

    //refreshes values for any error that requires a variable
    private static void updateValues(){
        DB.get(ERROR_CODE.ERR_BR_CELL_OOB).details = additionalDetails;
        DB.get(ERROR_CODE.ERR_BR_GENERIC).details = additionalDetails;
        DB.get(ERROR_CODE.ABN_BR_CELL_UNDER_CONSTRUXION).details = additionalDetails;
    }


    public static void printCellAtts(Board.Cell cell){additionalDetails+="\n[ROW]: "+cell.ROW+"\n[COLUMN]: "+cell.COLUMN+"\n[AGE]: "+cell.age+"\n[TYPE]: "+cell.type;}

    private static class Error extends Exception{
        ERROR_CODE code;
        String cause;
        boolean isError;
        String details;
        String additional;

        //used when first initializing the program. adds error to errorDB
        private Error(ERROR_CODE code, boolean isError, String cause, String details, String additional) {
            this.code = code;
            this.cause = cause;
            this.details = details;
            this.isError = isError;
            this.additional = additional;

            DB.put(code, this);
        }
    }

    private static class ErrorDB extends HashMap<ERROR_CODE,Error>{
        public void putAllErrs(Error[] errors){
            for(Error error:errors) {
                this.put(error.code, error);
            }
        }
    }
}

